class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        #literally the question that was asked on interviewing.io

        #understand
        #will the input array ever be empty? No(will have a size of at least 2)
        #are we guaranteed a solution? yes, exactly one solution
        #return indices by 1 and not value? yes

        #match
        #two pointer technique

        #plan
        #since the array is sorted we can start one pointer from the beginning and one at the end
        #then we sum the values from numbers[l] + numbers[r]
        #if sum == target
            #return each index plus one
        #else if the sum is greater than target 
            #decrement the right pointer by 1
        #else if the sum is less than target
            #increment the left pointer by 1
        
        #Time: O(n)
        #Space: O(1)
        l, r = 0, len(numbers) - 1

        while r > l:
            if (numbers[l] + numbers[r]) == target:
                return [l + 1, r + 1]
            elif (numbers[l] + numbers[r]) >= target:
                r -= 1
            else: #you do not need to rewrite the equation since this is the only thing possible
                l += 1
