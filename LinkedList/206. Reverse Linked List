# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        #iterative(using two pointer technique)
        
        #first use a previous and current pointer(set prev to null and curr to head)
        #could use special python syntax for initializing two variables in one line, but I want to make it more           #readable
        prev = None
        curr = head
        
        #Time: O(n)
        #Space: O(1)
        #in python it stops when it's not null
        while curr:
            nxt = curr.next #temp var to store curr.next
            curr.next = prev #the next of current has to be reversed so it points to prev
            prev = curr      #prev moves to the current
            curr = nxt       #curr moves to original curr.next
            
        
        #by the end the prev should point to the head and curr points to null so prev is returned
        
        return prev
