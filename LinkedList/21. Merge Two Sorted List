# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        #implementing dummy head technique
        #Time: O(n)
        #Space: O(1)
        
        dummy = ListNode()
        tail = dummy
        
        while list1 is not None and list2 is not None:
            if list1.val < list2.val:
                tail.next = list1 #our new list gets this inserted
                list1 = list1.next #we must go to the next node of this list to check
            else: 
                #in this case list2.val <= list1.val
                tail.next = list2
                list2 = list2.next
            tail = tail.next #since we always add a value to tail either way we traverse
            
       #this line is used if we have reached the end of one of the list, but not both
       #we add the rest of the list onto the tail
        if list1 is not None:
                tail.next = list1
        elif list2 is not None:
                tail.next = list2
            
        #.next points to the first element in the new sorted list that we want
        return dummy.next
